/*
MicroBuild
Copyright (C) 2016 TwinDrills

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// ---------------------------------------------------------------------------
// General use enums.
// ---------------------------------------------------------------------------
START_ENUM(EOutputType)
	ENUM_KEY(ConsoleApp)
	ENUM_KEY(Executable)
	ENUM_KEY(StaticLib)
	ENUM_KEY(DynamicLib)
	ENUM_KEY(Container)
END_ENUM()

START_ENUM(EOptimizationLevel)
	ENUM_KEY(None)
	ENUM_KEY(Debug)
	ENUM_KEY(PreferSpeed)
	ENUM_KEY(PreferSize)
	ENUM_KEY(Full)
END_ENUM()

START_ENUM(ECharacterSet)
	ENUM_KEY(Default)
	ENUM_KEY(Unicode)
	ENUM_KEY(MBCS)
END_ENUM()

START_ENUM(EPlatformToolset)

	ENUM_KEY(Default)

	// MSBuild
	ENUM_KEY(MSBuild_v140)
	ENUM_KEY(MSBuild_v141)

	// XCode	
	ENUM_KEY(XCode)

	// DotNet
	ENUM_KEY(DotNet_2_0)
	ENUM_KEY(DotNet_3_0)
	ENUM_KEY(DotNet_3_5)
	ENUM_KEY(DotNet_4_0)	
	ENUM_KEY(DotNet_4_5)	
	ENUM_KEY(DotNet_4_5_1)
	ENUM_KEY(DotNet_4_5_2)
	ENUM_KEY(DotNet_4_6)	

	// Android Api Toolsets
	ENUM_KEY(Android_3) 
	ENUM_KEY(Android_4) 
	ENUM_KEY(Android_5) 
	ENUM_KEY(Android_8) 
	ENUM_KEY(Android_9) 
	ENUM_KEY(Android_12) 
	ENUM_KEY(Android_13) 
	ENUM_KEY(Android_14) 
	ENUM_KEY(Android_15) 
	ENUM_KEY(Android_16) 
	ENUM_KEY(Android_17) 
	ENUM_KEY(Android_18) 
	ENUM_KEY(Android_19) 
	ENUM_KEY(Android_21) 
	ENUM_KEY(Android_22) 
	ENUM_KEY(Android_23)
	ENUM_KEY(Android_24)  

	// Mono
	ENUM_KEY(Mono)

	// Makefiles/etc
	ENUM_KEY(Clang)
	ENUM_KEY(GCC)

END_ENUM()

START_ENUM(EWarningLevel)
	ENUM_KEY(Default)
	ENUM_KEY(None)
	ENUM_KEY(Low)
	ENUM_KEY(Medium)
	ENUM_KEY(High)
	ENUM_KEY(Verbose)
END_ENUM()

START_ENUM(ESourceControlType)
	ENUM_KEY(None)
	ENUM_KEY(Git)
END_ENUM()

START_ENUM(EVersionNumberSource)
	ENUM_KEY(None)
	ENUM_KEY(SourceControl)
END_ENUM()

START_ENUM(EVersionFormat)
	ENUM_KEY(Changelist)
END_ENUM()

START_ENUM(EStandardLibrary)
	ENUM_KEY(Default)
	ENUM_KEY(LibStdCpp)
	ENUM_KEY(LibCpp)
END_ENUM()

START_ENUM(EAccelerator)
	ENUM_KEY(Default)
	ENUM_KEY(Sndbs)
	ENUM_KEY(IncrediBuild)
END_ENUM()

// ---------------------------------------------------------------------------
// Project
// ---------------------------------------------------------------------------
START_OPTION(
	std::string,
	Project,
	Name,
	"Name of project, used for output file and workspace descriptions."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Group,
	"Location in the workspace file of this project, allows nesting of projects "
	"within workspaces that support it. Can be multiple layers deep, delimate "
	"as per a normal path, eg: ThirdParty/Libraries"
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Project,
	ShouldBuild,
	"Determines if the project should be built, use in conjunction with if "
	"statements to disable building projects in different configurations."
)
OPTION_RULE_DEFAULT(true)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Project,
	ShouldDeploy,
	"Determines if the project should be deployed, use in conjunction with if "
	"statements to disable building projects in different configurations."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Location,
	"Output folder that project files are generated in."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_ABSOLUTE_PATH()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EOutputType,
	Project,
	OutputType,
	"Defines the type of output generated by building the project."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	Project,
	OutputName,
	"Basename of output file."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	Project,
	OutputExtension,
	"Extension of output file."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	IntermediateDirectory,
	"Directory that intermediate object files are stored in during build."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_ABSOLUTE_PATH()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	OutputDirectory,
	"Directory that build artifacts are output to."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_ABSOLUTE_PATH()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	ELanguage,
	Project,
	Language,
	"Language this project is written in. Determines compiler to use."
)
OPTION_RULE_REQUIRED()
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	ELanguageVersion,
	Project,
	LanguageVersion,
	"What language/standard version to compile against."
)
OPTION_RULE_DEFAULT(ELanguageVersion::Default)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EStandardLibrary,
	Project,
	StandardLibrary,
	"What standard library to compile against."
)
OPTION_RULE_DEFAULT(EStandardLibrary::Default)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	Project,
	RootNamespace,
	"Root namespace for the project, primarily used in .net projects."
)
OPTION_RULE_DEFAULT(std::string("$(Project.Name)"))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	Directory,
	"Automatically defined to the directory the project file is contained in."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Project,
	File,
	"Automatically defined to the path to the project file."
)
END_OPTION()

// ---------------------------------------------------------------------------
// Dependencies
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	std::string,
	Dependencies,
	Dependency,
	"Name of projects this project is dependent on, they will be built before "
	"this project is built."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Dependencies,
	AutoLink,
	"If set all library dependencies will automatically be linked to the output."
)
END_OPTION()


// ---------------------------------------------------------------------------
// Libraries
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	Libraries,
	Library,
	"Filename or path to library that should be linked to the output."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// References
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	References,
	Reference,
	"Assembly referenced by project, used primarily for .NET projects."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Files
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	Files,
	File,
	"Location of files to include in project. Can contain wildcards (*) "
	"and recursive wildcards (**)."
)
OPTION_RULE_REQUIRED()
OPTION_RULE_EXPAND_PATH_WILDCARDS(true)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Virtual Paths
// ---------------------------------------------------------------------------
START_KEY_VALUE_ARRAY_OPTION(
	VirtualPaths,
	"Defines a key-value pair, with the value being a path pattern to match "
	"project files against, and the key being a virtual path that the file "
	"will be placed under in the output project file. In the virtual path * "
	"will be expanded to the matched project path, explicitly provided path "
	"segments in the path pattern will be exluded from the expansion."
)
END_KEY_VALUE_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Acceleration
// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Acceleration,
	UseAcceleration,
	"Defines if we should use acceleration or not."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

START_OPTION(
	EAccelerator,
	Acceleration,
	Accelerator,
	"Defines what accelerator to use if installed."
)
OPTION_RULE_DEFAULT(EAccelerator::Sndbs)
END_OPTION()

// ---------------------------------------------------------------------------
// Build
// ---------------------------------------------------------------------------

START_OPTION(
	EOptimizationLevel,
	Build,
	OptimizationLevel,
	"Defines how heavily the project should be optimization, and what kind of "
	"optimizations should be performed."
)
OPTION_RULE_DEFAULT(EOptimizationLevel::Full)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	ECharacterSet,
	Build,
	CharacterSet,
	"Defines when character set to use for string literals / standard library."
)
OPTION_RULE_DEFAULT(ECharacterSet::Default)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EPlatformToolset,
	Build,
	PlatformToolset,
	"Which platform toolset to use for compilation, valid values depend on "
	"the target ide project files are being generated for."
)
OPTION_RULE_DEFAULT(EPlatformToolset::Default)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Build,
	PrecompiledHeader,
	"Path to file to use as a precompiled header for the project."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	Build,
	PrecompiledSource,
	"Source file that accompanies the precompiled header file."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EWarningLevel,
	Build,
	WarningLevel,
	"Determines what level of verbosity warnings should be emitted during build."
)
OPTION_RULE_DEFAULT(EWarningLevel::Default)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	Build,
	LinkerArguments,
	"Arguments passed to the linker without transformation."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	Build,
	CompilerArguments,
	"Arguments passed to the compiler without transformation."
)
END_OPTION()

// ---------------------------------------------------------------------------
// Defines
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	std::string,
	Defines,
	Define,
	"Preprocessor defines to pass into the compiler."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// DisabledWarnings
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	std::string,
	DisabledWarnings,
	DisabledWarning,
	"Disables the specific warning code while compiling."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Search Paths
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	SearchPaths,
	IncludeDirectory,
	"Defines a directory to look into for include files."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------

START_ARRAY_OPTION(
	Platform::Path,
	SearchPaths,
	LibraryDirectory,
	"Defines a directory to look into for library files."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// ForcedIncludes
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	Platform::Path,
	ForcedIncludes,
	ForcedInclude,
	"Defines a file to force the compiler to include at the start of all files."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Flags
// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	CompilerWarningsFatal,
	"If true all compiler warnings will abort the build."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	LinkerWarningsFatal,
	"If true all linker warnings will abort the build."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	RuntimeTypeInfo,
	"Determines if runtime type information should be generated."
)
OPTION_RULE_DEFAULT(true)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	GenerateDebugInformation,
	"Determines if debugging information (symbols) should be generated."
)
OPTION_RULE_DEFAULT(true)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	LinkTimeOptimization,
	"Determines if link time optimization should be applied to the build."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	Exceptions,
	"Determines if exceptions should be available in this build."
)
OPTION_RULE_DEFAULT(true)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	StaticRuntime,
	"Determines if the runtime library should be statically linked."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	Prefer32Bit,
	"Determines if dotnet AnyCpu projects should prefer 32bit compilation."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	bool,
	Flags,
	AllowUnsafeCode,
	"Determines if dotnet projects permit unsafe code."
)
OPTION_RULE_DEFAULT(false)
END_OPTION()


// ---------------------------------------------------------------------------
// Package References
// ---------------------------------------------------------------------------
START_KEY_VALUE_ARRAY_OPTION(
	Packages,
	"Defines a key-value pair, with the key being a package name and the value "
	"being the verison of the package. Used primarily for winrt/nuget package "
	"installation."
)
END_KEY_VALUE_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Build Step Commands
// ---------------------------------------------------------------------------
START_ARRAY_OPTION(
	std::string,
	PreBuildCommands,
	Command,
	"Commands to run before building."
)
END_ARRAY_OPTION()

START_ARRAY_OPTION(
	std::string,
	PreLinkCommands,
	Command,
	"Commands to run before linking."
)
END_ARRAY_OPTION()

START_ARRAY_OPTION(
	std::string,
	PostBuildCommands,
	Command,
	"Commands to run after building."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Product Info
// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Domain,
	"Domain name for the company producing the product in the format Domain.TLD, "
	"this is used to generate bundle identifiers on platforms that require them."
)
OPTION_RULE_DEFAULT(std::string("Unknown.com"))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Company,
	"Name of company that makes this product."
)
OPTION_RULE_DEFAULT(std::string(""))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Description,
	"Short description of this product."
)
OPTION_RULE_DEFAULT(std::string(""))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Name,
	"Short name of this product."
)
OPTION_RULE_DEFAULT(std::string(""))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Version,
	"Version number of this product. It's suggested to use semantic versioning."
)
OPTION_RULE_DEFAULT(std::string("1.0.0.0"))
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EVersionNumberSource,
	ProductInfo,
	VersionSource,
	"Where the version number should be sourced from, if none, just hard code "
	"the version property."
)
OPTION_RULE_DEFAULT(EVersionNumberSource::None)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	EVersionFormat,
	ProductInfo,
	VersionFormat,
	"What format to use for the version-number string."
)
OPTION_RULE_DEFAULT(EVersionFormat::Changelist)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	ProductInfo,
	VersionHpp,
	"If set the version number will be dumped to this file before building."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	Platform::Path,
	ProductInfo,
	VersionCpp,
	"If set the version number will be dumped to this file before building."
)
END_OPTION()

// ---------------------------------------------------------------------------

START_OPTION(
	std::string,
	ProductInfo,
	Copyright,
	"Copyright string used for executable information."
)
OPTION_RULE_DEFAULT(std::string(""))
END_OPTION()

// ---------------------------------------------------------------------------

START_ARRAY_OPTION(
	Platform::Path,
	ProductInfo,
	Icon,
	"Path to an icon for the product, in as high a resolution as possible. This "
	"icon will be downsampled and converted into whatever format the platlform requires. Multiple "
	"icons can be provided if you want different ones for specific sizes."
)
END_ARRAY_OPTION()

// ---------------------------------------------------------------------------
// Source Control
// ---------------------------------------------------------------------------

START_OPTION(
	ESourceControlType,
	SourceControl,
	Type,
	"Type of source control this project uses (if any)."
)
OPTION_RULE_DEFAULT(ESourceControlType::None)
END_OPTION()

START_OPTION(
	Platform::Path,
	SourceControl,
	Root,
	"Root folder that is controled by source control."
)
END_OPTION()

// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Platform Specific Information
// ---------------------------------------------------------------------------
#include "Schemas/Project/Platforms/Android.inc"
#include "Schemas/Project/Platforms/HTML5.inc"
#include "Schemas/Project/Platforms/iOS.inc"
#include "Schemas/Project/Platforms/Linux.inc"
#include "Schemas/Project/Platforms/MacOS.inc"
#include "Schemas/Project/Platforms/Nintendo3ds.inc"
#include "Schemas/Project/Platforms/NintendoWiiU.inc"
#include "Schemas/Project/Platforms/Playstation3.inc"
#include "Schemas/Project/Platforms/Playstation4.inc"
#include "Schemas/Project/Platforms/PlaystationVita.inc"
#include "Schemas/Project/Platforms/Windows.inc"
#include "Schemas/Project/Platforms/WindowsRT.inc"
#include "Schemas/Project/Platforms/Xbox360.inc"
#include "Schemas/Project/Platforms/XboxOne.inc"

// ---------------------------------------------------------------------------
// Packager Specific Information
// ---------------------------------------------------------------------------
#include "Schemas/Project/Packagers/Base.inc"
#include "Schemas/Project/Packagers/Steamworks.inc"

